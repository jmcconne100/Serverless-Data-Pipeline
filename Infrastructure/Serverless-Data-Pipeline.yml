AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create two S3 buckets, configure CloudTrail, integrate IAM policies and KMS encryption.

Resources:
  GlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "MyGlueCrawler"
      Role: !GetAtt GlueJobRole.Arn
      DatabaseName: "glue_hello-world-database"
      Targets:
        S3Targets:
          - Path: "s3://jon-data-pipeline-bucket/"
      TablePrefix: "glue_"
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "DEPRECATE_IN_DATABASE"
      RecrawlPolicy:
        RecrawlBehavior: "CRAWL_EVERYTHING"
      Configuration: "{\"Version\":1.0,\"Grouping\":{\"TableGroupingPolicy\":\"CombineCompatibleSchemas\"}}"

  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "GlueETLHelloWorldRole-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GlueETLHelloWorldPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::jon-scripts-bucket"
                  - !Sub "arn:aws:s3:::jon-scripts-bucket/*"
                  - !Sub "arn:aws:s3:::${DataBucket}"
                  - !Sub "arn:aws:s3:::${DataBucket}/*"
              - Effect: Allow
                Action:
                  - glue:CreateJob
                  - glue:StartJobRun
                  - glue:GetJobRun
                  - glue:GetJobRuns
                  - glue:GetJobs
                  - glue:BatchStopJobRun
                  - glue:BatchGetPartition
                  - glue:BatchCreatePartition
                  - glue:StartCrawler
                  - glue:GetCrawler
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:GetTable
                  - glue:GetTables
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:CreateTable
                  - glue:CreateDatabase
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt MyKMSKey.Arn
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole

  MyKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS Key for encrypting S3 bucket data"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"

  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'jon-data-pipeline-cloudtrail-logs-bucket'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${LogBucket}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub "${AWS::AccountId}"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/MyCloudTrail"
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: "s3:GetBucketAcl"
            Resource: !Sub "arn:aws:s3:::${LogBucket}"
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub "${AWS::AccountId}"

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'jon-data-pipeline-bucket'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
              KMSMasterKeyID: !Ref MyKMSKey
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        EventBridgeConfiguration: {}
      LoggingConfiguration:
        DestinationBucketName: !Ref LogBucket
        LogFilePrefix: "DataBucketLogs/"
      VersioningConfiguration:
        Status: Enabled

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: LogBucketPolicy
    Properties:
      TrailName: MyCloudTrail
      S3BucketName: !Ref LogBucket
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true

  CloudTrailAccessGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: CloudTrailAccessGroup

  CloudTrailAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudTrailAccessPolicy
      Groups:
        - !Ref CloudTrailAccessGroup
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "cloudtrail:DescribeTrails"
              - "cloudtrail:GetTrailStatus"
              - "cloudtrail:ListTrails"
              - "cloudtrail:StartLogging"
              - "cloudtrail:StopLogging"
            Resource: "*"
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
            Resource:
              - !Sub "arn:aws:s3:::${LogBucket}"
              - !Sub "arn:aws:s3:::${LogBucket}/AWSLogs/${AWS::AccountId}/*"

  S3KMSAccessGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: "S3AccessGroup"

  S3KMSAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "S3KMSAccessPolicy"
      Groups: 
        - !Ref S3KMSAccessGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:ListBucket"
            Resource: 
              - !Sub "arn:aws:s3:::${DataBucket}"
              - !Sub "arn:aws:s3:::${DataBucket}/*"
          - Effect: Allow
            Action:
              - "kms:Decrypt"
              - "kms:Encrypt"
            Resource: !GetAtt MyKMSKey.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaS3KMSExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaS3KMSAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::${DataBucket}"
                  - !Sub "arn:aws:s3:::${DataBucket}/*"
              - Effect: Allow
                Action:
                  - "kms:Encrypt"
                  - "kms:Decrypt"
                  - "kms:GenerateDataKey"
                Resource: !GetAtt MyKMSKey.Arn
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  HelloWorldLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FakeDataLambda
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: fake_data.lambda_handler
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          DATA_BUCKET: !Ref DataBucket
      Code:
        S3Bucket: jon-scripts-bucket
        S3Key: fake_data.zip
      Layers:
        - arn:aws:lambda:us-west-1:286036002000:layer:Faker:2

  GlueTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TriggerGlueCrawlerOnS3
      Runtime: python3.9
      Role: !GetAtt GlueTriggerLambdaRole.Arn
      Handler: index.lambda_handler
      Timeout: 10
      Code:
        ZipFile: |
          import boto3

          def lambda_handler(event, context):
              glue = boto3.client('glue')
              glue.start_crawler(Name='MyGlueCrawler')
              return {'statusCode': 200, 'body': 'Glue crawler started'}

  GlueTriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaStartGlueCrawlerRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartGlueCrawlerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ["glue:StartCrawler"]
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  S3ToGlueEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: TriggerGlueCrawlerOnS3Upload
      Description: Trigger Glue Crawler when any new file is uploaded to the bucket
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref DataBucket
      Targets:
        - Arn: !GetAtt GlueTriggerLambda.Arn
          Id: GlueTriggerLambdaTarget

  LambdaInvokePermissionForEventBridge:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GlueTriggerLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt S3ToGlueEventRule.Arn

Outputs:
  LogBucketName:
    Description: Name of the S3 bucket for CloudTrail logs
    Value: !Ref LogBucket

  DataBucketName:
    Description: Name of the additional S3 bucket with KMS encryption
    Value: !Ref DataBucket

  CloudTrailAccessGroup:
    Description: IAM Group with CloudTrail and LogBucket Access
    Value: !Ref CloudTrailAccessGroup

  S3KMSAccessGroup:
    Description: IAM Group with S3 and KMS Access
    Value: !Ref S3KMSAccessGroup

  LambdaFunctionName:
    Description: Name of the Lambda function that writes Hello World to S3
    Value: !Ref HelloWorldLambda

  LambdaExecutionRole:
    Description: IAM Role for Lambda execution
    Value: !GetAtt LambdaExecutionRole.Arn
